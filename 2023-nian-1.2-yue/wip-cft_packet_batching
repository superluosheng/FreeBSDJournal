# WIP/CFT:数据包批处理
**作者：TOM JONES 和 JOHN BALDWIN**

在过去的30年里，我们使用的计算机增长速度之快令人难以想象。1995年Alpha AXP的论文谈到了机器的设计，它延续了前25年的趋势，速度提高了1000倍。
我们当然已经实现了这个目标，作为FreeBSD最初目标的386机器类似于我们今天在键盘中使用的微控制器。

即使有了这些变化，计算机性能的核心仍然保持不变，每单位工作执行的指令更少，而且速度会更快。这种基本的网络事实导致了几种不同的方法来提高性能。我们已经研究了将工作从CPU转移到带有校验和卸载的网卡的机制。如果卡运行指令来校验输出的数据包，那么我们宝贵的CPU时间可以用来做其他事情。

校验和卸载看到了很好的结果，我们开始将其他东西从CPU转移到网络接口。TCP分段卸载（TSO）是提高网络发送器性能的下一个伟大机制。我们可以形成一个模板，并将其与一大块数据一起发送到卡上，而不是为我们将要发送的TCP段形成IP数据包。网络接口在将数据包放置到导线上时处理分段。TSO为TCP发送器带来了巨大的好处，使我们能够在耗尽单个核心之前就使10千兆网络接口饱和。

TSO让我们能够利用宝贵的资源提高效率。我们减少了发送每个数据包所需的总线（内存和PCI）事务的数量，方法是将它们批处理在一起，并在传输点创建最终块。对于TCP来说，这是直接的，大多数时候，如果我们正在批量发送数据流，并且数据块是清晰的。为了在TCP接收器上反映这些改进，我们有大型接收卸载（LRO）。LRO使我们能够再次减少维持高速数据传输所需的事务数量。

对于UDP，Linux有一些通用机制，试图复制类似TSO的机制。此支持由通用分段卸载（GSO）和通用接收卸载（GRO）一起提供。GSO在订单上实现了巨大的改进，对于UDP发送器来说，可以提高20%，GRO更难测量，但机制是存在的。

FreeBSD对TSO和LRO有很好的支持，但缺乏类似于GSO和GRO的机制。去年在维也纳的EuroBSDCon，我与John Baldwin谈论了他正在研究的一种类似于GRO的机制，他称之为Packet Batching。

**TJ：** 数据包批处理工作的背景是什么？<br>
**JB：** 在接收时进行数据包批处理的想法已经存在了一段时间，至少以愿望列表项目的形式存在，我听过很多人多次提到。我们已经有一些特定于TCP的用于发送（TSO）和接收（LRO）的数据包批处理形式。这种数据包批处理旨在比LRO更通用，以便它可以应用于其他协议（主要是UDP）。<br>
**TJ：** 为什么需要做这项工作？<br>
**JB：** TSO和LRO等数据包批处理方法的目标是通过每批进行一次而不是每包进行一次来摊销每包成本（网络堆栈中对报头字段的各种检查等）。随着网络速度的增长速度快于CPU速度，每包开销的成本成为一个越来越严重的问题。的确，通常情况下，解决这个问题的方法之一是通过使用RSS在绑定到不同CPU的单独队列中分发数据包来进行横向扩展，这确实有助于解决每个数据包的开销。然而，您不能在多个核心之间分配单个流，批处理方案旨在提高单个队列的性能。<br>
**TJ：** 这项工作使哪些新功能/增强成为可能？<br>
**JB：** 目标是提高PPS和/或减少网络接收工作负载的CPU使用量。当启用LRO时，我不希望它对TCP有帮助，主要是对UDP有帮助。<br>
**TJ：** 人们如何测试工作？通常，我们需要强调使用更多的分布式工作负载进行测试，这在这里适用吗？<br>
**JB：** 欢迎进行基准测试。我最初使用iperf3的一组简单基准测试是好坏参半的，并且没有足够明显的胜利来证明这些更改是合理的。这些变化确实增加了复杂性，所以我认为，在将其视为提交候选之前，它需要在某些工作负载中取得明显的胜利。到目前为止，我还没有观察到我的基准出现任何倒退，只是测量到零收益。<br>
**TJ：** 你希望得到什么样的反馈？<br>
**JB：** 直接给我发电子邮件可能是目前发送反馈的最佳方式。在未来的某个时刻，我将在net@和/或arch@上启动一个公共RFC线程，届时该线程将是发送反馈的最佳位置。想要测试补丁或查看补丁的人可以在 https://github.com/freebsd/freebsd-src/compare/main...bsdjhb:-freebsd:cxgbe_batching。<br>
从John在这里的回应来看，还不清楚应该从哪里看到好处。iperf3测量无法模拟非常繁忙的服务器的工作负载。对于FreeBSD中的数据包批处理来说，可能需要测试和调整更多的工作负载。通过关闭John的github分支并尝试您的网络流量，您可以帮助在FreeBSD中建立新的接收器优化。<br><br>

---
**TOM JONES** 希望基于FreeBSD的项目得到应有的关注。他住在苏格兰东北部，提供FreeBSD咨询服务。
<br><br>
**JOHN BALDWIN**是一名系统软件开发人员。20年来，他直接致力于在内核的各个部分（包括x86平台支持、SMP、各种设备驱动程序和虚拟内存子系统）和用户空间程序中对FreeBSD操作系统进行更改。除了编写代码，John还在FreeBSD核心和发布工程团队中任职。他还为GDB调试器和LLVM做出了贡献。John和他的妻子Kimberly以及三个孩子Janelle、Evan和Bella住在加利福尼亚州的康科德。

